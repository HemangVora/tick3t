import { getConfig } from "./getConfig.js";
import { createContext } from "./createContext.js";
import { getChainConfirmations } from "./getChainConfirmations.js";
export const waitForContractDeploy = async ({ hash, }) => {
    const { ethClient: client } = await createContext(getConfig());
    const receipt = await client.waitForTransactionReceipt({
        hash,
        confirmations: getChainConfirmations(client.chain?.name),
        retryCount: 120,
        retryDelay: 1000,
    });
    if (!receipt.contractAddress || receipt.status !== "success") {
        throw new Error(`Cannot get contract address from receipt: ${receipt.status}`);
    }
    return receipt.contractAddress;
};
export const waitForTransactionReceipt = async ({ hash, }) => {
    const { ethClient } = await createContext(getConfig());
    return ethClient.waitForTransactionReceipt({
        hash,
        confirmations: getChainConfirmations(ethClient.chain?.name),
        retryCount: 120,
        retryDelay: 1000,
    });
};
export const deployVlayerContracts = async ({ proverSpec, verifierSpec, proverArgs, verifierArgs, }) => {
    console.log("Starting contract deployment process...");
    const config = getConfig();
    const { chain, ethClient, account } = await createContext(config);
    console.log("Deploying prover contract...");
    const proverHash = await ethClient.deployContract({
        chain,
        account,
        args: proverArgs,
        abi: proverSpec.abi,
        bytecode: proverSpec.bytecode.object,
    });
    console.log(proverHash);
    const prover = await waitForContractDeploy({ hash: proverHash });
    console.log(`Prover contract deployed at: ${prover}`);
    console.log("Deploying verifier contract...");
    const verifierHash = await ethClient.deployContract({
        chain,
        account,
        args: prover ? [prover, ...(verifierArgs ?? [])] : verifierArgs,
        abi: verifierSpec.abi,
        bytecode: verifierSpec.bytecode.object,
    });
    const verifier = await waitForContractDeploy({ hash: verifierHash });
    console.log(`Verifier contract deployed at: ${verifier}`);
    console.log("Contract deployment completed successfully");
    return { prover, verifier };
};
